//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {

    public partial class Entity {

        public Percentage percentage { get { return (Percentage)GetComponent(ComponentIds.Percentage); } }
        public bool hasPercentage { get { return HasComponent(ComponentIds.Percentage); } }

        public Entity AddPercentage(float newValue) {
            var component = CreateComponent<Percentage>(ComponentIds.Percentage);
            component.value = newValue;
            return AddComponent(ComponentIds.Percentage, component);
        }

        public Entity ReplacePercentage(float newValue) {
            var component = CreateComponent<Percentage>(ComponentIds.Percentage);
            component.value = newValue;
            ReplaceComponent(ComponentIds.Percentage, component);
            return this;
        }

        public Entity RemovePercentage() {
            return RemoveComponent(ComponentIds.Percentage);
        }
    }

    public partial class Pool {

        public Entity percentageEntity { get { return GetGroup(Matcher.Percentage).GetSingleEntity(); } }
        public Percentage percentage { get { return percentageEntity.percentage; } }
        public bool hasPercentage { get { return percentageEntity != null; } }

        public Entity SetPercentage(float newValue) {
            if(hasPercentage) {
                throw new EntitasException("Could not set percentage!\n" + this + " already has an entity with Percentage!",
                    "You should check if the pool already has a percentageEntity before setting it or use pool.ReplacePercentage().");
            }
            var entity = CreateEntity();
            entity.AddPercentage(newValue);
            return entity;
        }

        public Entity ReplacePercentage(float newValue) {
            var entity = percentageEntity;
            if(entity == null) {
                entity = SetPercentage(newValue);
            } else {
                entity.ReplacePercentage(newValue);
            }

            return entity;
        }

        public void RemovePercentage() {
            DestroyEntity(percentageEntity);
        }
    }

    public partial class Matcher {

        static IMatcher _matcherPercentage;

        public static IMatcher Percentage {
            get {
                if(_matcherPercentage == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.Percentage);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherPercentage = matcher;
                }

                return _matcherPercentage;
            }
        }
    }
}
